# この講座の目標
並列処理の概念、やり方、注意点を学ぶ。
不必要に並列処理にしてもちゃんと動くようなコードを書けるようになってほしい。

# 並列処理とは
データやタスクを分割し、複数のスレッドで並列に処理することで高速化を実現する技術。
並行処理との違いは、並行処理はCPUコアが一つあれば出来、並列処理は複数のCPUコアがないと不可能であること。

## 用語
[参考](https://docs.oracle.com/cd/E19683-01/816-3976/6ma7iosht/index.html)
### CPUコアとは
実際に演算してくれるユニット。CPUは演算ユニットだが、コアの集合体として演算ユニットと言っている。

### スレッドとは
例えるなら、予定表の1日の予定に分割して書くやつ。
食事するときと勉強するときで使う脳のリソースがだいぶ違うことも例として適切かなと。
また、食事スレッドを実行しながら、1日の予定を思い出すスレッドも実行出来る。

最大スレッド数は、スレッドの中身や動作要件、マイコンのスペックなどにより決まる。

### プロセスとは
例えるなら、1日過ごすこと。起きる処理を実行し、食事スレッドを実行し、勉強スレッドを実行し、寝る処理をしてプロセスが終了する。

### タスクとは
ある処理群をまとめて指す概念。例えば、午前のタスクとか。もちろん1日のタスクとも出来るので、プロセス単位をタスクと読んでもいいし、スレッド単位をタスクと読んでも良い。

### キューとは
スレッド間通信で利用するシステム。順番待ちの列が出来るFIFO（First In First Out、早く入ったら早く出る）式において、列を作るためにキューを投げる。

### Mutex、Semaphoreとは
マルチスレッドにおいて、各スレッドが計算資源に同時にアクセス出来ないようにするシステム。
計算資源の性能に依るが、同時に1つの処理しか出来ない場合、ちょっと先に実行されたスレッドが他のスレッドのアクセス権を切り、処理が終わったらアクセス権を復活させる
